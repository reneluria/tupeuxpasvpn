---
- hosts: localhost
  gather_facts: false
  vars:
    key:
      name: 'myrsa'
      pub: "{{ lookup('file', '/Users/luria/.ssh/id_rsa.pub') }}"
    instance:
      name: 'my-instance2'
    image_name: 'ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-20190212.1'
    groupname: 'vpn'
    instance_type: 't2.micro'
    region: 'ca-central-1'
    secgroup:
      name: 'from_myself'
      description: 'icmp and ssh from home and vpn'

    delete: false
  tasks:
    - name: "Debug"
      debug:
        msg: "Region: {{ region }}"
    - name: fetch public cidr_ip
      command: "curl -s http://api.ipify.org"
      register: ipify
    - name: register public_ip
      set_fact:
        public_ip: "{{ ipify.stdout }}"
    - name: show public ip
      debug:
        msg: "Our public facing ip is {{ public_ip }}"
    - name: 'Get image id'
      command: "aws ec2 describe-images --region={{ region }} --filter 'Name=name,Values={{ image_name }}'"
      register: ec2_image
      changed_when: false
    - name: 'Register image info'
      set_fact:
        image_info: "{{ ec2_image.stdout | from_json }}"
    - name: 'Register image id'
      set_fact:
        image_id: "{{ image_info.Images[0].ImageId }}"
    # - meta: end_play
    - name: 'Create SSH keypair'
      ec2_key:
        name: "{{ key.name }}"
        key_material: "{{ key.pub }}"
        region: "{{ region }}"
    - name: 'Create security group'
      ec2_group:
        name: "{{ secgroup.name }}"
        description: "{{ secgroup.description }}"
        rules:
          - proto: icmp
            from_port: -1
            to_port:  -1
            cidr_ip:
              - "{{ public_ip }}/32"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip:
              - "{{ public_ip }}/32"
        region: "{{ region }}"
    - name: 'Create VM'
      ec2:
        group: "{{ secgroup.name }}"
        image: "{{ image_id }}"
        key_name: "{{ key.name }}"
        instance_type: "{{ instance_type }}"
        region: "{{ region }}"
        user_data: |
          #!/bin/bash
          update-alternatives --install /usr/bin/python python3.6 /usr/bin/python3.6 1
        wait: true
        exact_count: 1
        count_tag:
          groupname: "{{ groupname }}"
        instance_tags:
          groupname: "{{ groupname }}"
      register: ec2
    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_dns_name }}"
        public_dns_name: "{{ item.public_dns_name }}"
        groupname: "{{ groupname }}"
        ansible_host: "{{ item.public_ip }}"
        ansible_user: ubuntu
        instance_id: "{{ item.id }}"
        tags:
          groupname: "{{ groupname }}"
      with_items: "{{ ec2.instances }}"
    - name: Wait for SSH to come up
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 5
        timeout: 320
      with_items: "{{ ec2.instances }}"
    - name: Print info
      debug:
        msg: "Instane {{ item.id }} at {{ item.public_ip }} / {{ item.public_dns_name }}"
      with_items: "{{ ec2.instances }}"

- name: 'Create artifacts folder'
  hosts: localhost
  gather_facts: false

  tasks:
    - name: 'prepare folder'
      file:
        path: artifacts
        state: directory

- name: 'Create vpn script'
  hosts: all
  gather_facts: false
  tags:
    - script
  vars:
    groupname: 'vpn'
  tasks:
    - debug: var=ansible_facts
    - name: 'vpn script'
      template:
        src: start-vpn.sh.j2
        dest: artifacts/start-vpn.sh
        mode: '0700'
      delegate_to: localhost
      when: tags.groupname == groupname
